<?php
/**
 * @file
 * @brief Файл с классом лестницы Stair
 * 
 * Файл содержит определение пространства имен и класса лестницы Stair
 */
namespace Stair;

// use StairMaterial;

/* -------------------------------------------------------------------------- */
/*                        Создание экземпляра лестницы                        */
/* -------------------------------------------------------------------------- */

/**
 * @brief Описание класса Stair
 * 
 * Объект класса Stair включает в себя элементы лестницы, способ их добавления и
 * расчета цен как одного элемента в отдельности, так и всей лестницы целиком
 */
class Stair
{

/* -------------------------------- Свойства -------------------------------- */

  /**
   * @brief Массив объектов-элементов лестницы
   * @property array $elements
   * 
   * @details Основной рабочий массив, куда собираются все элементы лестницы
   * такие как ступени, балясины, поручень и т.п.
   */
  private $elements = [];
  /**
   * @brief Основной материал лестницы
   * @property StairMaterial $material
   * 
   * @details Основной материал, задаваемый по умолчанию, из которого изготовлена лестница
   * @todo Необходимо дать возможность выбора материала для каждого элемента
   * для создания лестницы сосна-дуб или использования МДФ
   */
  private $material;
  /**
   * @brief общая цена материалов и изготовления элементов лестницы
   * @property numeric $total_elements_price
   * 
   * @todo Возможно удалить из свойств объекта и использовать только getter цены,
   * т.к. это свойство больше нигде не используется
   */
  private $total_elements_price = 0; 

  /**
   * @brief Конструктор объекта лестницы
   * @param[in] $material Основной материал лестницы
   * 
   * Создает объект новый лестницы из выбранного материала
   */
  public function __construct(\StairMaterial\StairMaterial $material)
  {
    $this->material = $material;
  }

/* --------------------- добавление элемента в лестницу --------------------- */

  /**
   * @brief Добавление нового элемента
   * @param[in] $element Добавляемый объект-элемент лестницы
   * 
   * Метод добавляет новый элемент в массив элементов лестницы,
   * ключами которого являются полные названия элементов лестницы,
   * а значением весь объект элемента лестницы
   */
  public function addStairElement(\StairElement\StairElement $element)
  {
    $this->elements[$element->getFullElementName()] = $element;
  }

/* ---------------- получить общую цену для данного элемента ---------------- */

  /**
   * @brief Вычисление стоимости элемента
   * @param[in] $key Полное наименование элемента лестницы
   * @return Полную стоимость элемента лестницы
   * 
   * Возвращает полную стоимость элемента лестницы в зависимости от материала
   * и объема (площади, количества, погоных метров)
   */
  private function getTotalElementPrice($key)
  {
    return $this->elements[$key]->getTotalAmount() * $this->material->getPrice($this->elements[$key]->getShortElementName());
  }

/* -------------------- получить общую цену для лестницы -------------------- */

  /**
   * @brief Вычисление полной стоимости лестницы
   * @return Полную стоимость всей лестницы
   * @todo Пока рассчитывается только цена всех элементов без учета накладных расходов и покраски
   * 
   * Обходит массив всех элементов, вычисляет цену каждого и суммирует их.
   */
  public function getTotalStairPrice()
  {
    $this->total_elements_price = 0;
    foreach ($this->elements as $name => $element) {
      $this->total_elements_price += $this->getTotalElementPrice($element->getFullElementName());
    }
    return $this->total_elements_price;
  }

/* ---- получение наименований ключей (в нормальной версии можно убрать) ---- */

  /**
   * @brief Полные названия элементов
   * @warning Используется только в разработке, можно удалить в будущем
   * 
   * Обходит массив элементов и выводит их названия-ключи
   */
  public function getNames()
  {
    foreach ($this->elements as $name => $element) {
      echo "Имя элемента: $name<br>";
    }
  }
}
?>