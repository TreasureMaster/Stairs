<?php
/**
 * @file
 * @brief Абстрактный класс материала StairMaterial
 * 
 * Файл содержит определение абстрактного класса StairMaterial,
 * который будет содержать прайс каждого элемента лестницы
 * в зависимости от материала
 */
namespace StairMaterial;

/* -------------------------------------------------------------------------- */
/*                            Абстрактный материал                            */
/* -------------------------------------------------------------------------- */

/**
 * @brief Описание абстрактного класса StairMaterial
 * 
 * Объект класса включает прайс всех элементов в зависимости от материала,
 * а общий для всех дочерних классов метод возвращает цену элемента.
 */
abstract class StairMaterial
{
  /**
   * @brief Единственный материал лестницы
   * @property StairMaterial $instance
   * 
   * @details Объект Singleton создает единственный материал лестницы
   * @todo Необходимо предусмотреть возможность создания материала
   * для каждого элемента в отдельности, чтобы можно было создавать
   * комбинированные лестницы плюс использовать МДФ
   */
  protected static $instance;

  // пустой прайс по всем элементам лестницы
  /**
   * @brief Пустой прайс всех элементов лестницы
   * @property array $price
   * 
   * @details Инициализирует пустой прайс элементов
   * @todo Создан для будущей поэлементной инициализации прайса, в котором
   * если не будет какого-то элемента, будет использоваться значение null
   */
  private $price = [
    'shortlevel'          => null,   ///< короткая ступень (до 1м)
    'longlevel'           => null,   ///< длинная ступень (свыше 1м)
    'stairlanding'        => null,   ///< площадка
    'stairriser'          => null,   ///< подступенок
    'stairbaseboard'      => null,   ///< сапожок
    'figeredlevel'        => null,   ///< фигурная ступень
    'bridgeboard'         => null,   ///< косоур/тетива
    'jackboard'           => null,   ///< отбойная доска
    'pseudobridgeboard'   => null,   ///< фальшкосоур
    'baluster'            => null,   ///< балясина
    'balustradecolumn'    => null,   ///< балюстрадный столб
    'rodcolumn'           => null,   ///< опорный столб
    'handrail'            => null,   ///< поручень
    'stairtrim'           => null,   ///< раскладка
    'balusterbottomboard' => null,   ///< подбалясная доска
    'customboard'         => null,   ///< нестандартный профиль
    'benthandrail'        => null    ///< гнутый поручень
  ];

  /**
   * @brief Конструктор объекта материала StairMaterial
   * @param[in] $price Прайс-лист элементов лестницы
   * 
   * Создает новый объект материала лестницы
   */
  protected function __construct($price)
  {
    $this->price = $price;
  }

  /**
   * @brief Получение цены отдельного элемента
   * @param[in] $key Ключ-короткое имя элемента
   * @return Цену элемента или false, если такого элемента нет в списке.
   * 
   * Возвращает цену элемента в зависимости от его короткого имени или
   * false, если такой элемент отсутствует в списке.
   */
  public function getPrice($key)
  {
    $key = strtolower($key); // можно убрать в будущем ???
    return $this->price[$key] ?? false;
  }

  /**
   * @brief Создает или возвращает объект материала
   * @param[in] $price Передаваемый конструктору прайс-лист материала
   * @return Единственный объект материала
   * 
   * Возвращает объект Singleton, который задает единственный материал для всей лестницы.
   * @todo Необходимо предусмотреть создание материала для отдельных элементов лестницы.
   */
  abstract public static function getInstance($price);
}

?>